workflow:
  id: implementation-cycle
  name: 实现层开发周期工作流
  description: >-
    实现层的核心工作流，由哪吒(开发工程师)和杨戬(QA工程师)协作，
    将技术设计转化为高质量的可工作软件。
  type: implementation
  team: implementation-layer
  project_types:
    - feature-development
    - bug-fixing
    - refactoring
    - performance-optimization

  prerequisites:
    - system-architecture.md (系统架构)
    - api-specification.md (API规范)
    - implementation-guide.md (实现指导)
    - user-stories/ (用户故事)

  sequence:
    - step: development_environment_setup
      agent: dev
      action: 开发环境搭建和配置
      creates: dev-environment-setup.md
      requires: technology-stack.md
      notes: "哪吒搭建开发环境，配置必要的工具和依赖。"

    - step: test_strategy_design
      agent: qa
      action: 测试策略设计
      creates: test-strategy.md
      uses: test-plan-tmpl
      requires: 
        - user-stories/
        - api-specification.md
      notes: "杨戬设计全面的测试策略，包括单元、集成、端到端测试。"

    - step: code_structure_design
      agent: dev
      action: 代码结构设计
      creates: code-structure.md
      requires: 
        - system-architecture.md
        - implementation-guide.md
      collaborates_with: qa
      notes: "哪吒设计代码结构，杨戬确保可测试性。"

    - step: tdd_implementation
      agent: dev
      action: 测试驱动开发实现
      creates: 
        - src/
        - tests/
      requires: 
        - test-strategy.md
        - code-structure.md
      collaborates_with: qa
      notes: "哪吒采用TDD方式实现功能，杨戬协助测试用例设计。"

    - step: code_review
      agent: dev
      action: 代码审查
      reviews: src/
      collaborates_with: qa
      notes: "哪吒进行代码自审和同行审查，杨戬从质量角度审查。"

    - step: unit_testing
      agent: qa
      action: 单元测试执行和验证
      executes: tests/unit/
      requires: src/
      notes: "杨戬执行单元测试，确保代码质量和覆盖率。"

    - step: integration_testing
      agent: qa
      action: 集成测试
      creates: tests/integration/
      executes: integration_tests
      requires: 
        - src/
        - api-specification.md
      collaborates_with: dev
      notes: "杨戬设计和执行集成测试，哪吒协助环境配置。"

    - step: performance_testing
      agent: qa
      action: 性能测试
      creates: performance-test-results.md
      requires: 
        - src/
        - performance-plan.md
      notes: "杨戬执行性能测试，验证性能目标达成。"

    - step: security_testing
      agent: qa
      action: 安全测试
      creates: security-test-results.md
      requires: 
        - src/
        - security-architecture.md
      notes: "杨戬执行安全测试，确保安全要求满足。"

    - step: bug_fixing_cycle
      agent: dev
      action: 缺陷修复
      updates: src/
      requires: test-results/
      collaborates_with: qa
      notes: "哪吒修复发现的缺陷，杨戬验证修复效果。"

    - step: documentation_update
      agent: dev
      action: 技术文档更新
      creates: 
        - docs/api-docs/
        - docs/deployment-guide.md
      requires: src/
      notes: "哪吒更新技术文档，确保文档与代码同步。"

    - step: deployment_preparation
      agent: dev
      action: 部署准备
      creates: 
        - deployment/
        - ci-cd-config/
      requires: 
        - src/
        - docs/deployment-guide.md
      collaborates_with: qa
      notes: "哪吒准备部署配置，杨戬验证部署流程。"

  outputs:
    primary:
      - src/ (源代码)
      - tests/ (测试代码)
      - docs/api-docs/ (API文档)
      - deployment/ (部署配置)
    
    secondary:
      - test-strategy.md
      - code-structure.md
      - performance-test-results.md
      - security-test-results.md
      - docs/deployment-guide.md

  handoff_to:
    - business-value-layer (演示和验收)
    - process-coordination-layer (发布管理)

  quality_gates:
    - code_review_passed
    - unit_test_coverage_80_percent
    - integration_tests_passed
    - performance_targets_met
    - security_tests_passed
    - documentation_updated
    - deployment_ready

  estimated_duration: "1-4 Sprint周期"

  success_criteria:
    - 所有用户故事的验收标准满足
    - 代码质量达到团队标准
    - 测试覆盖率达到80%以上
    - 性能指标满足要求
    - 安全测试通过
    - 技术文档完整准确
    - 部署流程验证通过
    - 无阻塞性缺陷

  collaboration_patterns:
    daily_dev_qa_sync:
      participants: [哪吒, 杨戬]
      frequency: daily
      duration: "15分钟"
      focus: "开发进度和质量状态同步"
      
    code_review_session:
      participants: [哪吒, 杨戬]
      frequency: "每个功能完成后"
      duration: "45分钟"
      purpose: "代码质量审查和改进建议"
      
    testing_collaboration:
      participants: [哪吒, 杨戬]
      frequency: "持续进行"
      pattern: "结对测试和问题解决"

  tools_integration:
    development:
      - vscode
      - git
      - docker
      - kubernetes
    
    testing:
      - jest
      - cypress
      - postman
      - jmeter
    
    quality_assurance:
      - sonarqube
      - eslint
      - prettier
      - husky
    
    ci_cd:
      - github_actions
      - jenkins
      - gitlab_ci

  metrics:
    development_velocity:
      - story_points_completed
      - code_commit_frequency
      - feature_delivery_time
    
    quality_metrics:
      - defect_density
      - test_coverage_percentage
      - code_review_efficiency
      - technical_debt_ratio
    
    performance_metrics:
      - build_time
      - test_execution_time
      - deployment_frequency
      - mean_time_to_recovery

  automation_features:
    continuous_integration:
      - automated_testing_on_commit
      - code_quality_checks
      - security_scanning
      - performance_regression_testing
    
    continuous_deployment:
      - automated_deployment_to_staging
      - smoke_testing_automation
      - rollback_automation
      - monitoring_integration

  risk_mitigation:
    technical_risks:
      - incremental_development_approach
      - early_integration_testing
      - technical_spike_investigation
    
    quality_risks:
      - comprehensive_test_automation
      - code_review_mandatory
      - quality_gates_enforcement
    
    delivery_risks:
      - sprint_scope_management
      - dependency_tracking
      - risk_based_testing
